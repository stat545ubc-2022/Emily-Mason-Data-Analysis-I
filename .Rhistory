ggplot(cancer_sample, aes(x=symmetry_cat, y=smoothness_mean)) + geom_histogram()
##Research Question 3-------------------------------
#summarizing selection: #3 (for symmetry variables)
symmetry_cat <- cut(cancer_sample$symmetry_mean, seq(0,0.30,0.1), labels=c("low","medium","high"))
smooth_cat <- cut(cancer_sample$smoothness_mean, seq(0,0.18,0.09), labels=c("rough", "smooth"))
#graphing selection:#5
ggplot(cancer_sample, aes(x=symmetry_cat, y=smoothness_mean)) + geom_point()
##Research Question 3-------------------------------
#summarizing selection: #3 (for symmetry variables)
symmetry_cat <- cut(cancer_sample$symmetry_mean, seq(0,0.30,0.1), labels=c("low","medium","high"))
smooth_cat <- cut(cancer_sample$smoothness_mean, seq(0,0.18,0.09), labels=c("rough", "smooth"))
#graphing selection:#5
ggplot(cancer_sample, aes(x=symmetry_cat, y=smoothness_mean)) + geom_point(aes(colour=diagnosis))
##Research Question 3-------------------------------
#summarizing selection: #3 (for symmetry variables)
symmetry_cat <- cut(cancer_sample$symmetry_mean, seq(0,0.30,0.1), labels=c("low","medium","high"))
smooth_cat <- cut(cancer_sample$smoothness_mean, seq(0,0.18,0.09), labels=c("rough", "smooth"))
#graphing selection:#5
ggplot(cancer_sample, aes(x=symmetry_cat, y=smoothness_mean)) + geom_point(aes(colour=smooth_cat))
##Research Question 3-------------------------------
#summarizing selection: #3 (for symmetry variables)
symmetry_cat <- cut(cancer_sample$symmetry_mean, seq(0,0.30,0.1), labels=c("low","medium","high"))
smooth_cat <- cut(cancer_sample$smoothness_mean, seq(0,0.18,0.09), labels=c("rough", "smooth"))
#graphing selection:#5
ggplot(cancer_sample, aes(x=symmetry_cat, y=smoothness_mean)) + geom_point(aes(colour=smooth_cat), alpha=0.5)
##Research Question 3-------------------------------
#summarizing selection: #3 (for symmetry variables)
symmetry_cat <- cut(cancer_sample$symmetry_mean, seq(0,0.30,0.1), labels=c("low","medium","high"))
smooth_cat <- cut(cancer_sample$smoothness_mean, seq(0,0.18,0.09), labels=c("rough", "smooth"))
#graphing selection:#5
ggplot(cancer_sample, aes(x=symmetry_cat, y=smoothness_mean)) + geom_point(aes(colour=area_cat), alpha=0.5)
##Research Question 3-------------------------------
#summarizing selection: #3 (for symmetry variables)
symmetry_cat <- cut(cancer_sample$symmetry_mean, seq(0,0.30,0.1), labels=c("low","medium","high"))
smooth_cat <- cut(cancer_sample$smoothness_mean, seq(0,0.18,0.09), labels=c("rough", "smooth"))
#graphing selection:#5
ggplot(cancer_sample, aes(x=symmetry_cat, y=smoothness_mean)) + geom_point(aes(colour=id), alpha=0.5)
##Research Question 3-------------------------------
#summarizing selection: #3 (for symmetry variables)
symmetry_cat <- cut(cancer_sample$symmetry_mean, seq(0,0.30,0.1), labels=c("low","medium","high"))
smooth_cat <- cut(cancer_sample$smoothness_mean, seq(0,0.18,0.09), labels=c("rough", "smooth"))
#graphing selection:#5
ggplot(cancer_sample, aes(x=symmetry_cat, y=smoothness_mean)) + geom_point(aes(colour=perimeter_category), alpha=0.5)
##Research Question 3-------------------------------
#summarizing selection: #3 (for symmetry variables)
symmetry_cat <- cut(cancer_sample$symmetry_mean, seq(0,0.30,0.1), labels=c("low","medium","high"))
smooth_cat <- cut(cancer_sample$smoothness_mean, seq(0,0.18,0.09), labels=c("rough", "smooth"))
#graphing selection:#5
ggplot(cancer_sample, aes(x=symmetry_cat, y=smoothness_mean)) + geom_point(alpha=0.5)
##Research Question 3-------------------------------
#summarizing selection: #3 (for symmetry variables)
symmetry_cat <- cut(cancer_sample$symmetry_mean, seq(0,0.30,0.1), labels=c("low","medium","high"))
smooth_cat <- cut(cancer_sample$smoothness_mean, seq(0,0.18,0.09), labels=c("rough", "smooth"))
#graphing selection:#5
ggplot(cancer_sample, aes(x=symmetry_cat, y=smoothness_mean)) + geom_point(alpha=0.5) + geom_smooth()
##Research Question 3-------------------------------
#summarizing selection: #3 (for symmetry variables)
symmetry_cat <- cut(cancer_sample$symmetry_mean, seq(0,0.30,0.1), labels=c("low","medium","high"))
smooth_cat <- cut(cancer_sample$smoothness_mean, seq(0,0.18,0.09), labels=c("rough", "smooth"))
#graphing selection:#5
ggplot(cancer_sample, aes(x=symmetry_cat, y=smoothness_mean)) + geom_histogram()
##Research Question 3-------------------------------
#summarizing selection: #3 (for symmetry variables)
symmetry_cat <- cut(cancer_sample$symmetry_mean, seq(0,0.30,0.1), labels=c("low","medium","high"))
smooth_cat <- cut(cancer_sample$smoothness_mean, seq(0,0.18,0.09), labels=c("rough", "smooth"))
#graphing selection:#5
ggplot(cancer_sample, aes(x=symmetry_cat, y=smoothness_mean)) + geom_boxplot()
##Research Question 3-------------------------------
#summarizing selection: #3 (for symmetry variables)
symmetry_cat <- cut(cancer_sample$symmetry_mean, seq(0,0.30,0.1), labels=c("low","medium","high"))
smooth_cat <- cut(cancer_sample$smoothness_mean, seq(0,0.18,0.09), labels=c("rough", "smooth"))
#graphing selection:#5
ggplot(cancer_sample, aes(x=symmetry_cat, y=smoothness_mean)) + geom_boxplot() + geom_errorbar()
##Research Question 3-------------------------------
#summarizing selection: #3 (for symmetry variables)
symmetry_cat <- cut(cancer_sample$symmetry_mean, seq(0,0.30,0.1), labels=c("low","medium","high"))
smooth_cat <- cut(cancer_sample$smoothness_mean, seq(0,0.18,0.09), labels=c("rough", "smooth"))
#graphing selection:#5
ggplot(cancer_sample, aes(x=symmetry_cat, y=smoothness_mean)) + geom_boxplot() + geom_errorbar(aes())
##Research Question 3-------------------------------
#summarizing selection: #3 (for symmetry variables)
symmetry_cat <- cut(cancer_sample$symmetry_mean, seq(0,0.30,0.1), labels=c("low","medium","high"))
smooth_cat <- cut(cancer_sample$smoothness_mean, seq(0,0.18,0.09), labels=c("rough", "smooth"))
#graphing selection:#5
ggplot(cancer_sample, aes(x=symmetry_cat, y=smoothness_mean)) + geom_boxplot()
##Research Question 3-------------------------------
#summarizing selection: #3 (for symmetry variables)
symmetry_cat <- cut(cancer_sample$symmetry_mean, seq(0,0.30,0.1), labels=c("low","medium","high"))
smooth_cat <- cut(cancer_sample$smoothness_mean, seq(0,0.18,0.09), labels=c("rough", "smooth"))
#graphing selection:#5
ggplot(cancer_sample, aes(x=symmetry_cat, y=smoothness_mean)) + geom_boxplot() + geom_errorbar(aes(ymin="0", ymax="0.20"))
##Research Question 3-------------------------------
#summarizing selection: #3 (for symmetry variables)
symmetry_cat <- cut(cancer_sample$symmetry_mean, seq(0,0.30,0.1), labels=c("low","medium","high"))
smooth_cat <- cut(cancer_sample$smoothness_mean, seq(0,0.18,0.09), labels=c("rough", "smooth"))
#graphing selection:#5
ggplot(cancer_sample, aes(x=symmetry_mean, y=smoothness_mean)) + geom_point(alpha=0.5) + geom_line()
##Research Question 3-------------------------------
#summarizing selection: #3 (for symmetry variables)
symmetry_cat <- cut(cancer_sample$symmetry_mean, seq(0,0.30,0.1), labels=c("low","medium","high"))
smooth_cat <- cut(cancer_sample$smoothness_mean, seq(0,0.18,0.09), labels=c("rough", "smooth"))
#graphing selection:#5
ggplot(cancer_sample, aes(x=symmetry_mean, y=smoothness_mean), color=diagnosi) + geom_point(alpha=0.5) + geom_line()
##Research Question 3-------------------------------
#summarizing selection: #3 (for symmetry variables)
symmetry_cat <- cut(cancer_sample$symmetry_mean, seq(0,0.30,0.1), labels=c("low","medium","high"))
smooth_cat <- cut(cancer_sample$smoothness_mean, seq(0,0.18,0.09), labels=c("rough", "smooth"))
#graphing selection:#5
ggplot(cancer_sample, aes(x=symmetry_mean, y=smoothness_mean), color=diagnosis) + geom_point(alpha=0.5) + geom_line()
##Research Question 3-------------------------------
#summarizing selection: #3 (for symmetry variables)
symmetry_cat <- cut(cancer_sample$symmetry_mean, seq(0,0.30,0.1), labels=c("low","medium","high"))
smooth_cat <- cut(cancer_sample$smoothness_mean, seq(0,0.18,0.09), labels=c("rough", "smooth"))
#graphing selection:#5
ggplot(cancer_sample, aes(x=symmetry_mean, y=smoothness_mean, colour=symmetry_cat)) + geom_point(alpha=0.5) + geom_line()
##Research Question 3-------------------------------
#summarizing selection: #3 (for symmetry variables)
symmetry_cat <- cut(cancer_sample$symmetry_mean, seq(0,0.30,0.1), labels=c("low","medium","high"))
smooth_cat <- cut(cancer_sample$smoothness_mean, seq(0,0.18,0.09), labels=c("rough", "smooth"))
#graphing selection:#5
ggplot(cancer_sample, aes(x=symmetry_mean, y=smoothness_mean, colour=diagnosis)) + geom_point(alpha=0.5) + geom_line()
##Research Question 3-------------------------------
#summarizing selection: #3 (for symmetry variables)
symmetry_cat <- cut(cancer_sample$symmetry_mean, seq(0,0.30,0.1), labels=c("low","medium","high"))
smooth_cat <- cut(cancer_sample$smoothness_mean, seq(0,0.18,0.09), labels=c("rough", "smooth"))
#graphing selection:#5
ggplot(cancer_sample, aes(x=symmetry_mean, y=smoothness_mean, colour=smooth_cat)) + geom_point(alpha=0.5) + geom_line()
#7 showing color with texture categories
ggplot(cancer_sample, aes(x=area_mean, y=texture_mean, color=text_cat)) + geom_point(alpha=0.5)
#graphing selection: #5
ggplot(cancer_sample, aes(x=perimeter_category, fill=diagnosis)) + geom_bar(position="dodge") + geom_density()
#graphing selection: #5
ggplot(cancer_sample, aes(x=perimeter_category, fill=diagnosis)) + geom_bar(position="dodge") + geom_errorbar()
#graphing selection: #5
ggplot(cancer_sample, aes(x=perimeter_category, fill=diagnosis)) + geom_bar(position="dodge") + geom_line()
#graphing selection: #5
ggplot(cancer_sample, aes(x=perimeter_category, fill=diagnosis)) + geom_bar(position="dodge") + geom_line(y=perimeter_mean)
#graphing selection: #5
ggplot(cancer_sample, aes(x=perimeter_category, fill=diagnosis)) + geom_bar(position="dodge") + geom_line(y=cancer_sample$perimeter_mean)
#graphing selection: #5
ggplot(cancer_sample, aes(x=perimeter_category, fill=diagnosis)) + geom_bar(position="dodge") + geom_point(y=cancer_sample$perimeter_mean)
#graphing selection: #5
ggplot(cancer_sample, aes(x=perimeter_category, fill=diagnosis)) + geom_bar(position="dodge") + geom_point(y=cancer_sample$area_mean)
#graphing selection: #5
ggplot(cancer_sample, aes(x=perimeter_category, fill=diagnosis)) + geom_bar(position="dodge") + geom_point(y=cancer_sample$texture_mean)
#graphing selection: #5
ggplot(cancer_sample, aes(x=perimeter_category, fill=diagnosis)) + geom_bar(position="dodge") + geom_line(y=cancer_sample$texture_mean)
#graphing selection: #5
ggplot(cancer_sample, aes(x=perimeter_category, fill=diagnosis)) + geom_bar(position="dodge") + geom_line(x=perimeter_mean, y=cancer_sample$texture_mean)
#graphing selection: #5
ggplot(cancer_sample, aes(x=perimeter_category, fill=diagnosis)) + geom_bar(position="dodge") + geom_point(cancer_sample, aes(x=perimeter_mean, y=area_mean))
#graphing selection: #5
ggplot(cancer_sample, aes(x=perimeter_category, fill=diagnosis)) + geom_bar(position="dodge") + geom_point(cancer_sample, aes(x=perimeter_mean, y=area_mean))
#graphing selection: #5
ggplot(cancer_sample, aes(x=perimeter_category, fill=diagnosis)) + geom_bar(position="dodge") + geom_line(x=cancer_sample$perimeter_mean, y=cancer_sample$area_mean)
#graphing selection: #5
ggplot(cancer_sample, aes(x=perimeter_category, fill=diagnosis)) + geom_bar(position="dodge") + geom_point(y=cancer_sample$perimeter_mean)
`{r, message = FALSE} library(datateachr) # <- might contain the data you picked! library(tidyverse)`
library(datateachr)
library(tidyverse)
# Task 1: Tidy your data (15 points)
cancer_sample
Based on the definition above, can you identify if your data is tidy or
#Variable 3:
summary(cancer_sample)
library(datateachr)
library(tidyverse)
library(dplyr)
#Variable 1: ID
cancer_sample$ID
#Variable 1: ID
summary(cancer_sample$ID)
##Variables selected: ID, Diagnosis, radius_mean, texture_mean, perimeter_mean, area_mean, smoothness_mean, compactness_mean
cancer_sample
##Variables selected: ID, Diagnosis, radius_mean, texture_mean, perimeter_mean, area_mean, smoothness_mean, compactness_mean
cancer_sample
#This data can be considered tidy because it meets the three requirements. Each row refers to one patient sample, each column considered here can be considered a variable, and each cell has an entry.
use is.na(cancer_sample$radius_mean)
##Variables selected: ID, Diagnosis, radius_mean, texture_mean, perimeter_mean, area_mean, smoothness_mean, compactness_mean
cancer_sample
#This data can be considered tidy because it meets the three requirements. Each row refers to one patient sample, each column considered here can be considered a variable, and each cell has an entry.
is.na(cancer_sample$radius_mean)
##Variables selected: ID, Diagnosis, radius_mean, texture_mean, perimeter_mean, area_mean, smoothness_mean, compactness_mean
cancer_sample
#This data can be considered tidy because it meets the three requirements. Each row refers to one patient sample, each column considered here can be considered a variable, and each cell has an entry (as determined using is.na below)
is.na(cancer_sample$radius_mean)
is.na(cancer_sample$texture_mean)
##Variables selected: ID, Diagnosis, radius_mean, texture_mean, perimeter_mean, area_mean, smoothness_mean, compactness_mean
cancer_sample
#This data can be considered tidy because it meets the three requirements. Each row refers to one patient sample, each column considered here can be considered a variable, and each cell has an entry (as determined using is.na below)
is.na(cancer_sample$radius_mean)
is.na(cancer_sample$texture_mean)
is.na(cancer_sample$perimeter_mean)
##Variables selected: ID, Diagnosis, radius_mean, texture_mean, perimeter_mean, area_mean, smoothness_mean, compactness_mean
cancer_sample
#This data can be considered tidy because it meets the three requirements. Each row refers to one patient sample, each column considered here can be considered a variable, and each cell has an entry (as verified using is.na below)
is.na(cancer_sample$radius_mean)
is.na(cancer_sample$texture_mean)
is.na(cancer_sample$perimeter_mean)
is.na(cancer_sample$area_mean)
##Variables selected: ID, Diagnosis, radius_mean, texture_mean, perimeter_mean, area_mean, smoothness_mean, compactness_mean
cancer_sample
#This data can be considered tidy because it meets the three requirements. Each row refers to one patient sample, each column considered here can be considered a variable, and each cell has an entry (as verified using is.na below)
is.na(cancer_sample$radius_mean)
is.na(cancer_sample$texture_mean)
is.na(cancer_sample$perimeter_mean)
is.na(cancer_sample$area_mean)
is.na(cancer_sample$smoothness_mean)
##Variables selected: ID, Diagnosis, radius_mean, texture_mean, perimeter_mean, area_mean, smoothness_mean, compactness_mean
cancer_sample
#This data can be considered tidy because it meets the three requirements. Each row refers to one patient sample, each column considered here can be considered a variable, and each cell has an entry (as verified using is.na below)
is.na(cancer_sample$radius_mean)
is.na(cancer_sample$texture_mean)
is.na(cancer_sample$perimeter_mean)
is.na(cancer_sample$area_mean)
is.na(cancer_sample$smoothness_mean)
is.na(cancer_sample$compactness_mean)
##Variables selected: ID, Diagnosis, radius_mean, texture_mean, perimeter_mean, area_mean, smoothness_mean, compactness_mean
cancer_sample
#This data can be considered tidy because it meets the three requirements. Each row refers to one patient sample, each column considered here can be considered a variable, and each cell has an entry (as verified using is.na below)
is.na(cancer_sample$ID)
is.na(cancer_sample$radius_mean)
is.na(cancer_sample$texture_mean)
is.na(cancer_sample$perimeter_mean)
is.na(cancer_sample$area_mean)
is.na(cancer_sample$smoothness_mean)
is.na(cancer_sample$compactness_mean)
##since the dataset can be considered tidy, I will untidy the data first:
df %>%
pivot_wider(names_from = Diagnosis, values_from = compactness_mean)
##since the dataset can be considered tidy, I will untidy the data first:
df %>%
pivot_wider(cancer_sample, names_from = Diagnosis, values_from = compactness_mean)
##since the dataset can be considered tidy, I will untidy the data first by combining measurement mean variables into a single column:
measuretype %>%
pivot_longer(cancer_sample, names_to = "Measurement Type")
##since the dataset can be considered tidy, I will untidy the data first by combining measurement mean variables into a single column:
pivot_longer(cancer_sample, names_to = "Measurement Type")
library(datateachr)
library(tidyverse)
library(dplyr)
# Task 1: Tidy your data (15 points)
##since the dataset can be considered tidy, I will untidy the data first by combining measurement mean variables into a single column:
pivot_longer(cancer_sample, names_to = "Measurement Type")
##since the dataset can be considered tidy, I will untidy the data first by combining measurement mean variables into a single column:
pivot_longer(cancer_sample, cols = "radius_mean", "texture_mean", names_to = "Measurement Type")
##since the dataset can be considered tidy, I will untidy the data first by combining measurement mean variables into a single column:
pivot_longer(cancer_sample, cols = "radius_mean", "texture_mean", "perimeter_mean", "area_mean", "smoothness_mean", "compactness_mean", names_to = "Measurement Type")
##since the dataset can be considered tidy, I will untidy the data first by combining measurement mean variables into a single column:
pivot_longer(cancer_sample, cols = "radius_mean", "texture_mean", "perimeter_mean", "area_mean", "smoothness_mean", "compactness_mean", names_to = "Measurement Type")
rlang::last_error()
rlang::last_trace()
##since the dataset can be considered tidy, I will untidy the data first by combining measurement mean variables into a single column:
untidy <- cancer_sample %>%
pivot_longer(cancer_sample, cols = "radius_mean", "texture_mean", "perimeter_mean", "area_mean", "smoothness_mean", "compactness_mean", names_to = "Measurement Type")
##since the dataset can be considered tidy, I will untidy the data first by combining measurement mean variables into a single column:
untidy <- cancer_sample %>%
pivot_longer(cancer_sample, cols = radius_mean:compactness_mean, names_to = "Measurement Type")
##since the dataset can be considered tidy, I will untidy the data first by combining measurement mean variables into a single column:
pivot_longer(cancer_sample, cols = radius_mean:compactness_mean, names_to = "Measurement Type")
##since the dataset can be considered tidy, I will untidy the data first by combining measurement mean variables into a single column:
untidy <- pivot_longer(cancer_sample, cols = radius_mean:compactness_mean, names_to = "Measurement Type")
##since the dataset can be considered tidy, I will untidy the data first by combining measurement mean variables into a single column:
untidy <- pivot_longer(cancer_sample, cols = radius_mean:compactness_mean, names_to = "Measurement_Type")
untidy$M
##since the dataset can be considered tidy, I will untidy the data first by combining measurement mean variables into a single column:
untidy <- pivot_longer(cancer_sample, cols = radius_mean:compactness_mean, names_to = "Measurement_Type")
untidy$Measurement_Type
#now that the dataset is untidy, I will use the pivot_wider function to restore the dataset back to its original state
retidy <- pivot_wider(cancer_sample, names_from = "Measurement_Type")
untidy
#now that the dataset is untidy, I will use the pivot_wider function to restore the dataset back to its original state
retidy <- pivot_wider(cancer_sample, names_from = "Measurement_Type", values_from = "value")
#now that the dataset is untidy, I will use the pivot_wider function to restore the dataset back to its original state
retidy <- pivot_wider(untidy, names_from = "Measurement_Type", values_from = "value")
```{=html}
```{=html}
cancer_sample
tumor dimensions <- td = subset(cancer_sample, c=(ID, diagnosis, radius_mean, texture_mean, perimeter_mean, area_mean, smoothness_mean, compactness_mean))
cancer_sample
tumor_dimenson = subset(cancer_sample, c=(ID, diagnosis, radius_mean, texture_mean, perimeter_mean, area_mean, smoothness_mean, compactness_mean))
tumor_dimenson = subset(cancer_sample, select = c(ID, diagnosis, radius_mean, texture_mean, perimeter_mean, area_mean, smoothness_mean, compactness_mean))
#function 2 -
tumor_dimension
```{=html}
#function 2 -
tumor_dimension
#function 1 - dropping unused columns
tumor_dimension = subset(cancer_sample, select = c(ID, diagnosis, radius_mean, texture_mean, perimeter_mean, area_mean, smoothness_mean, compactness_mean))
#function 2 -
tumor_dimension
#function 2 - filtering for malignant tumors
summary(tumor_dimension)
#function 2 - creating categorial variable for 'tumor size', where radius, perimeter and area are in the top quartile of values
large_tumor <- filter(tumor_dimension, radius_mean > "15.780", perimeter_mean > "104.10", area_mean > "782.7")
large_tumor <- filter(tumor_dimension, radius_mean > "15.780", perimeter_mean > "104.10", area_mean > "782.7")
summary(large_tumor)
#function 3 - filtering for small tumor size, where radius, perimeter, and area are in the bottom quartile of values
small_tumor <- filter(tumor_dimension, radius_mean < "16.32", perimeter_mean < "108.2", area_mean < "829.9")
#function 4 - tidying data to
measures_dimensions <- pivot_longer(tumor_dimension, cols = radius_mean:compactness_mean, names_to = "Measurement Type")
#function 5 - create new categorical variable to include mean area sizes
area_cat <- cut(tumor_dimension$area_mean, seq(0,2500,250), labels=c(1:10))
#function 5 - create new categorical variable to include mean area sizes
area_cat <- cut(tumor_dimension$area_mean, seq(0,1000,250), labels=c(1:4))
#to show the cut function worked to categorize tumor area in ascending values:
ggplot(cancer_sample, aes(x=area_mean, y=perimeter_mean, color=area_cat)) + geom_point(alpha=0.5)
#to show how diagnosis is distributed among tumor dimensions
ggplot(cancer_sample, aes(x=area_mean, y=perimeter_mean, color=diagnosis)) + geom_point(alpha=0.5)
#7 showing color with texture categories on geom_point graph with both variables shown numerically.
ggplot(cancer_sample, aes(x=area_mean, y=texture_mean, color=text_cat)) + geom_point(alpha=0.5)
##Research Question 3-------------------------------
#summarizing selection: #3 (for symmetry variable, to better visualize relationship with smoothness)
symmetry_cat <- cut(cancer_sample$symmetry_mean, seq(0,0.30,0.1), labels=c("low","medium","high"))
smooth_cat <- cut(cancer_sample$smoothness_mean, seq(0,0.18,0.09), labels=c("rough", "smooth"))
#graphing selection:#5
ggplot(cancer_sample, aes(x=symmetry_mean, y=smoothness_mean, colour=smooth_cat)) + geom_point(alpha=0.5) + geom_line()
#graphing selection: #5 (shows a bar graph of malignant and benign diagnoses of increasing perimeter categories with a geom_point addition to show perimeter means)
ggplot(cancer_sample, aes(x=perimeter_category, fill=diagnosis)) + geom_bar(position="dodge") + geom_point(y=cancer_sample$perimeter_mean)
ggplot(cancer_sample, aes(x=area_mean)) + geom_histogram(binwidth=50, colour = "purple")
ggplot(cancer_sample, aes(x=area_mean, col=diagnosis)) + geom_density()
boxplot(cancer_sample$area_mean, horizontal = TRUE, main ="distribution of tumor area means", xlab="mean areas")
```{=html}
ggplot(tumor_dimension, aes(x=area_mean, y=perimeter_mean, color=area_cat)) + geom_point(alpha=0.5)
ggplot(tumor_dimension, aes(x=radius_mean, y=perimeter_mean, color=area_cat)) + geom_point(alpha=0.5)
```{=html}
```{=html}
ggplot(tumor_dimension, aes(x=radius_mean, y=perimeter_mean, color=area_cat)) + geom_point(alpha=0.5)
ggplot(tumor_dimension, aes(x=compactness_mean, y=perimeter_mean, color=area_cat)) + geom_point(alpha=0.5)
ggplot(tumor_dimension, aes(x=smoothness_mean, y=perimeter_mean, color=area_cat)) + geom_point(alpha=0.5)
ggplot(tumor_dimension, aes(x=smoothness_mean, y=compactness_mean, color=area_cat)) + geom_point(alpha=0.5)
ggplot(tumor_dimension, aes(x=smoothness_mean, y=symmetry_mean, color=area_cat)) + geom_point(alpha=0.5)
ggplot(tumor_dimension, aes(x=smoothness_mean, y=compactness_mean, color=area_cat)) + geom_point(alpha=0.5)
ggplot(tumor_dimension, aes(x=smoothness_mean, y=compactness_mean, color=symmetry_cat)) + geom_point(alpha=0.5)
ggplot(tumor_dimension, aes(x=area_mean, y=compactness_mean, color=smooth_cat)) + geom_point(alpha=0.5)
ggplot(tumor_dimension, aes(x=area_mean, y=compactness_mean, color=text_cat)) + geom_point(alpha=0.5)
#graphing selection: #5 (shows a bar graph of malignant and benign diagnoses of increasing perimeter categories with a geom_point addition to show perimeter means)
ggplot(cancer_sample, aes(x=perimeter_category, fill=diagnosis)) + geom_bar(position="dodge") + geom_point(y=cancer_sample$perimeter_mean)
ggplot(tumor_dimension, aes(x=area_mean, y=compactness_mean, color=text_cat)) + geom_point(alpha=0.5)
tumor_dimension_fact <- factor(cancer_sample$text_cat)
tumor_dimension_fact <- factor(cancer_sample$text_cat)
test_cat
tumor_dimension_fact <- factor(cancer_sample$text_cat)
text_cat
tumor_dimension_fact <- factor(text_cat)
text_cat
ggplot(tumor_dimension, aes(x=perimeter_mean, y=compactness_mean, color=area_cat)) + geom_point(alpha=0.5)
tumor_area <- factor(area_cat)
fct_reorder(tumor_area, perimeter_mean)
```{=html}
mutate(class = fct_reorder(area_cat, compactness_mean, .fun='mean' )) %>%
mutate(class = fct_reorder(area_cat, compactness_mean, .fun='mean' )) %>%
ggplot( aes(x=compactness_mean, y=perimeter_mean, fill=area_cat)) +
geom_boxplot()
mutate(class = fct_reorder(area_cat, compactness_mean, .fun='mean' )) %>%
ggplot( aes(x=area_mean, y=perimeter_mean, fill=area_cat)) +
geom_boxplot()
mutate(class = fct_reorder(area_cat, perimeter_mean, .fun='mean' )) %>%
ggplot( aes(x=area_mean, y=perimeter_mean, fill=area_cat)) +
geom_boxplot()
mutate(class = fct_reorder(class, hwy, .fun='median')) %>%
ggplot( aes(x=reorder(class, hwy), y=hwy, fill=class)) +
geom_boxplot()
mutate(class = fct_reorder2(diagnosis, cancer_sample$perimeter_mean, .fun='median')) %>%
ggplot( aes(x=reorder(diagnosis, cancer_sample$perimeter_mean), y=cancer_sample$perimeter_mean, fill=area_cat)) +
geom_boxplot()
mutate(class = fct_reorder2(cancer_sample$diagnosis, cancer_sample$perimeter_mean, .fun='median')) %>%
ggplot( aes(x=reorder(cancer_sample$diagnosis, cancer_sample$perimeter_mean), y=cancer_sample$perimeter_mean, fill=area_cat)) +
geom_boxplot()
View(untidy)
```{=html}
tumor_dimension_fct <- cancer_sample %>%
filter(area_mean > 654.9) %>%
mutate(radius_mean = factor(case_when(radius_mean < 11.7 ~ "low",
radius_mean < 14.127 ~ "moderate",
radius_mean < 15.780 ~ "high",
TRUE ~ "very high")
levels = c(low", "moderate", "high", "very high")))
tumor_dimension_fct <- cancer_sample %>%
filter(area_mean > 654.9) %>%
mutate(radius_mean = factor(case_when(radius_mean < 11.7 ~ "low",
radius_mean < 14.127 ~ "moderate",
radius_mean < 15.780 ~ "high",
TRUE ~ "very high")
levels = c(low", "moderate", "high", "very high"))
tumor_dimension_fct <- cancer_sample %>%
filter(area_mean > 654.9) %>%
mutate(radius_mean = factor(case_when(radius_mean < 11.7 ~ "low",
radius_mean < 14.127 ~ "moderate",
radius_mean < 15.780 ~ "high",
TRUE ~ "very high")
levels = c(low", "moderate", "high", "very high")))
tumor_dimension_fct <- cancer_sample %>%
filter(area_mean > 654.9) %>%
mutate(radius_mean = factor(case_when(radius_mean < 11.7 ~ "low",
radius_mean < 14.127 ~ "moderate",
radius_mean < 15.780 ~ "high",
TRUE ~ "very_high")
levels = c(low", "moderate", "high", "very high")))
tumor_dimension_fct <- cancer_sample %>%
filter(area_mean > 654.9) %>%
mutate(radius_mean = factor(case_when(radius_mean < 11.7 ~ "low",
radius_mean < 14.127 ~ "moderate",
radius_mean < 15.780 ~ "high",
TRUE ~ "very high")
levels = c(low", "moderate", "high", "very high")))
tumor_dimension_fct <- cancer_sample %>%
filter(area_mean > 654.9) %>%
mutate(radius_mean = factor(case_when(radius_mean < 11.7 ~ "low",
radius_mean < 14.127 ~ "moderate",
radius_mean < 15.780 ~ "high",
TRUE ~ "very high")
levels = c("low", "moderate", "high", "very high")))
tumor_dimension_fct <- cancer_sample %>%
filter(area_mean > 654.9) %>%
mutate(radius_mean = factor(case_when(radius_mean < 11.7 ~ "low",
radius_mean < 14.127 ~ "moderate",
radius_mean < 15.780 ~ "high",
radius_mean < 15.780 ~ "very high")
levels = c("low", "moderate", "high", "very high")))
tumor_dimension_fct <- cancer_sample %>%
filter(area_mean > 654.9) %>%
mutate(radius_mean = factor(case_when(radius_mean < 11.7 ~ "low",
radius_mean < 14.127 ~ "moderate",
radius_mean < 15.780 ~ "high",
radius_mean < 15.780 ~ "very high") +
levels = c("low", "moderate", "high", "very high")))
tumor_dimension_fct <- cancer_sample %>%
filter(area_mean > 654.9) %>%
mutate(radius_mean = factor(case_when(radius_mean < 11.7 ~ "low",
radius_mean < 14.127 ~ "moderate",
radius_mean < 15.780 ~ "high",
radius_mean < 15.780 ~ "very high"),
levels = c("low", "moderate", "high", "very high")))
head(tumor_dimension_fct)
#create new plot
ggplot(tumor_dimension_fct) + geom_boxplot(aes(x = radius_mean, y = area_mean)) +
labs(y = "GDP per capita ($)", x= "Life expectancy level (years)") +
scale_x_discrete(drop = FALSE) + # Don't drop the very low factor
ggtitle("GDP per capita per level of Life Expectancy") +
theme_bw()
#explain reordering
I chose to reorder the mean radius values into low:very high as a measure of tumor dimension for further visualization and analysis.
summary(cancer_sample$radius_mean)
tumor_dimension_fct <- cancer_sample %>%
filter(area_mean > 654.9) %>%
mutate(radius_mean = factor(case_when(radius_mean < 11.7 ~ "low",
radius_mean < 14.127 ~ "moderate",
radius_mean < 15.780 ~ "high",
radius_mean > 15.780 ~ "very high"),
levels = c("low", "moderate", "high", "very high")))
head(tumor_dimension_fct)
#create new plot
ggplot(tumor_dimension_fct) + geom_boxplot(aes(x = radius_mean, y = area_mean)) +
labs(y = "GDP per capita ($)", x= "Life expectancy level (years)") +
scale_x_discrete(drop = FALSE) + # Don't drop the very low factor
ggtitle("GDP per capita per level of Life Expectancy") +
theme_bw()
#explain reordering
I chose to reorder the mean radius values into low:very high as a measure of tumor dimension for further visualization and analysis.
#create new plot
ggplot(tumor_dimension_fct) + geom_boxplot(aes(x = radius_mean, y = area_mean)) +
labs(y = "mean tumor area", x= "mean radius") +
scale_x_discrete(drop = FALSE) + # Don't drop the very low factor
ggtitle("Tumor dimensions") +
theme_bw()
#explain reordering
I chose to reorder the mean radius values into low:very high as a measure of tumor dimension for further visualization and analysis.
```{=html}
fct_collapse(tumor_dimension_fct$radius_mean,
high = c("high", "very high")
missing = c("NA"))
fct_collapse(tumor_dimension_fct$radius_mean,
high = c("high", "very high"),
missing = c("NA"))
fct_collapse(tumor_dimension_fct$radius_mean,
large = c("high", "very high"),
small = c("low", "moderate"),
missing = c("NA"))
fct_collapse(tumor_dimension_fct$radius_mean,
large = c("high", "very high"),
small = c("low", "moderate"),
missing = c("<NA>"))
fct_collapse(tumor_dimension_fct$radius_mean,
large = c("high", "very high"),
small = c("low", "moderate"))
ggplot(tumor_dimension, aes(x=perimeter_mean, y=compactness_mean, color=area_cat)) + geom_point(alpha=0.5)
ggplot(tumor_dimension, aes(x=perimeter_mean, y=compactness_mean, color=diagnosis)) + geom_point(alpha=0.5)
ggplot(tumor_dimension, aes(x=perimeter_mean, y=compactness_mean, color=area_cat)) + geom_point(alpha=0.5)
```{=html}
ggplot(tumor_dimension, aes(x=perimeter_mean, y=compactness_mean, color=diagnosis)) + geom_point(alpha=0.5)
ggplot(tumor_dimension, aes(x=perimeter_mean, y=area_mean, color=diagnosis)) + geom_point(alpha=0.5)
ggplot(tumor_dimension, aes(x=perimeter_mean, y=area_mean, group=diagnosis, color=diagnosis)) +
geom_line() + geom_point()
ggplot(tumor_dimension, aes(x=compactness_mean, y=area_mean, group=diagnosis, color=diagnosis)) +
geom_line() + geom_point()
#visualizing the relationship
ggplot(tumor_dimension, aes(x=compactness_mean, y=area_mean, group=diagnosis, color=diagnosis)) +
geom_line() + geom_point()
#t.test of mean area between diagnoses
t.test(tumor_dimension$area_mean~tumor_dimension$diagnosis, mu=0, alt = "two.sided", conf = 0.95, var.eq = F, paired = F)
#visualizing the relationship
ggplot(tumor_dimension, aes(x=compactness_mean, y=area_mean, group=diagnosis, color=diagnosis)) +
geom_line() + geom_point()
#t.test of mean area between diagnoses
tt <- t.test(tumor_dimension$area_mean~tumor_dimension$diagnosis, mu=0, alt = "two.sided", conf = 0.95, var.eq = F, paired = F)
```{=html}
#broom tibble produced from comparing mean areas of tumors with benign and malignant tumors:
tidy(tt)
#broom tibble produced from comparing mean areas of tumors with benign and malignant tumors:
library(broom)
tidy(tt)
